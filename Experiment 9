#include <stdio.h>
#include <stdlib.h>
typedef struct Node {                         
    int data;
    struct Node *next;
} Node;
Node *head = NULL;
Node *createNode(int ele) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->data = ele;
    newNode->next = NULL;
    return newNode;
}
void insertNodeatBeg(int ele) {
    Node *newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
        newNode->next = head; 
    } else {
        Node *temp = head;
        while (temp->next != head)
            temp = temp->next;
            newNode->next = head;
            temp->next = newNode;
            head = newNode;
    }
    printf("Node inserted at beginning\n");
}
void insertNodeatEnd(int ele) {
    Node *newNode = createNode(ele);
    if (head == NULL) {
        head = newNode;
        newNode->next = head;
    } else {
        Node *temp = head;
        while (temp->next != head)
            temp = temp->next;
        temp->next = newNode;
        newNode->next = head;
    }
    printf("Node inserted at end\n");
}
void insertNodeatPos(int pos, int ele) {
    if (pos <= 0) {
        printf("Invalid position\n");
        return;
    }
    if (pos == 1) {
        insertNodeatBeg(ele);
        return;
    }
    Node *newNode = createNode(ele);
    Node *temp = head;
    int i = 1;
    while (i < pos - 1 && temp->next != head) {
        temp = temp->next;
        i++;
    }
    if (i != pos - 1) {
        printf("Position out of range\n");
        free(newNode);
        return;
    }
    newNode->next = temp->next;
    temp->next = newNode;
    printf("Node inserted at position %d\n", pos);
}
void deleteNodeFromBegining() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    if (head->next == head) {
        free(head);
        head = NULL;
    } else {
        Node *temp = head;
        Node *last = head;
        while (last->next != head)
            last = last->next;
        head = head->next;
        last->next = head;
        free(temp);
    }
    printf("Node deleted from beginning\n");
}
void deleteNodeFromEnd() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    if (head->next == head) {
        free(head);
        head = NULL;
    } else {
        Node *temp = head;
        Node *prev = NULL;
        while (temp->next != head) {
            prev = temp;
            temp = temp->next;
        }
        prev->next = head;
        free(temp);
    }
    printf("Node deleted from end\n");
}
void deleteNodeFromPos(int pos) {
    if (head == NULL || pos <= 0) {
        printf("Invalid position or empty list\n");
        return;
    }
    if (pos == 1) {
        deleteNodeFromBegining();
        return;
    }
    Node *temp = head;
    Node *prev = NULL;
    int i = 1;
    while (i < pos && temp->next != head) {
        prev = temp;
        temp = temp->next;
        i++;
    }
    if (i != pos) {
        printf("Position out of range\n");
        return;
    }
    prev->next = temp->next;
    free(temp);
    printf("Node deleted from position %d\n", pos);
}
void display() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    Node *temp = head;
    printf("Elements: ");
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("\n");
}
int main() {
    while (1) {
        int choice, ele, pos;
        printf("\n--- Circular Singly Linked List ---\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at End\n");
        printf("3. Insert at Position\n");
        printf("4. Delete from Beginning\n");
        printf("5. Delete from End\n");
        ptintf("6. Delete from Any Position\n");
        printf("7. Display\n");
        printf("8. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);
        switch (choice) {
        case 1:
            printf("Enter element: ");
            scanf("%d", &ele);
            insertNodeatBeg(ele);
            break;
        case 2:
            printf("Enter element: ");
            scanf("%d", &ele);
            insertNodeatEnd(ele);
            break;
        case 3:
            printf("Enter position: ");
            scanf("%d", &pos);
            printf("Enter element: ");
            scanf("%d", &ele);
            insertNodeatPos(pos, ele);
            break;
        case 4:
            deleteNodeFromBegining();
            break;
        case 5:
            deleteNodeFromEnd();
            break;
        case 6:
            printf("Enter position: ");
            scanf("%d", &pos);
            deleteNodeFromPos(pos);
            break;
        case 7:
            display();
            break;
        case 8:
            exit(0);
        default:
            printf("Invalid choice!\n");
        }
    }
    return 0;
}
