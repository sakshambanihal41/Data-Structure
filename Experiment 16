// Binary tree using Linked List
#include<stdio.h>
#include<stdlib.h>
struct TreeNode{
    struct TreeNode* left;
    int data;
    struct TreeNode* right;
};
struct TreeNode* createNode(int value){
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->data = value;
    node->left = node->right = NULL;
    return node;
}
void insert(int value){

}
void preorder(struct TreeNode* root){
    if(root != NULL){
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}
void inorder(struct TreeNode*  root){
    if(root != NULL){
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}
void postorder(struct TreeNode* root){
    if(root != NULL){
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }

}
void levelorder(int root){

}
void search(int root, int value){

}
void delete(int root, int value){

}
int main(){
    int choice, value;
    struct TreeNode* root = NULL;
    while(1){
        printf("1. Insert\n");
        printf("2. Pre-Order\n");
        printf("3. In- Order\n");
        printf("4. Post- Order\n");
        printf("5. Level Order\n");
        printf("6. Search\n");
        printf("7. Delete\n");
        printf("8. Exit\n");
        printf("Enter Choice :");
        scanf("%d", &choice);
        switch(choice){
            case 1:
            break;
            case 2:
            break;
            case 5:
            break;
            case 6:
            break;
            case 7:
            break;
            case 8:
            break;
            default:
            printf("Invalid choice !!\n");
        }
    }
return 0;

}
